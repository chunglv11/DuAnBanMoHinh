// <auto-generated />
using System;
using BanMoHinh.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BanMoHinh.API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231001085807_add-data")]
    partial class adddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BanMoHinh.Share.Models.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f180bdeb-4587-41ae-af0d-3f87922f644c"),
                            BrandName = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("67f26e63-00ef-46c0-b736-b769b1b3b890"),
                            BrandName = "Brand 2"
                        },
                        new
                        {
                            Id = new Guid("5a94ea4a-46fe-4db2-babc-7c009a736c67"),
                            BrandName = "Brand 3"
                        },
                        new
                        {
                            Id = new Guid("8c0b64d4-8176-4bc7-9795-f40e9bde946d"),
                            BrandName = "Brand 4"
                        },
                        new
                        {
                            Id = new Guid("5aa8f30e-4822-4a6d-aff5-a66cae01b2a5"),
                            BrandName = "Brand 5"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetail_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetail_ID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d66eaac-20fa-45e1-a4d8-66f92f8308f8"),
                            CategoryName = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("578942ac-8c63-46a1-8364-336f5c50d4dd"),
                            CategoryName = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("c0749423-e4e6-4407-ac49-523e83c14e7c"),
                            CategoryName = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("7a8f965e-9fce-4291-96e0-8038a8e6b290"),
                            CategoryName = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("ed08c89b-eeeb-42a9-a11d-9ad3f76132eb"),
                            CategoryName = "Category 5"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Colors", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = new Guid("769585ff-6d9e-4070-aebd-256248ed4146"),
                            ColorCode = "#000000",
                            ColorName = "Đen"
                        },
                        new
                        {
                            ColorId = new Guid("7c0b62c7-a930-4a49-ae94-0e946bf2b105"),
                            ColorCode = "#FFFFFF",
                            ColorName = "Trắng"
                        },
                        new
                        {
                            ColorId = new Guid("cce6949d-a2b9-4b68-8c9d-915cf6428891"),
                            ColorCode = "#FF0000",
                            ColorName = "Đỏ"
                        },
                        new
                        {
                            ColorId = new Guid("29748565-2c9b-4851-9c6b-853dda79a928"),
                            ColorCode = "#00FF00",
                            ColorName = "Xanh lá cây"
                        },
                        new
                        {
                            ColorId = new Guid("d9cbf0b2-6760-458d-bce6-80b9d56855c9"),
                            ColorCode = "#0000FF",
                            ColorName = "Xanh dương"
                        },
                        new
                        {
                            ColorId = new Guid("f9f92f5c-1d1b-40a6-853b-7b6116a05752"),
                            ColorCode = "#FFFF00",
                            ColorName = "Vàng"
                        },
                        new
                        {
                            ColorId = new Guid("89296303-7daf-4601-8c14-18b16b7ed3f0"),
                            ColorCode = "#FFA500",
                            ColorName = "Cam"
                        },
                        new
                        {
                            ColorId = new Guid("9efe3f79-2523-403d-bc92-fd3e597f8168"),
                            ColorCode = "#800080",
                            ColorName = "Tím"
                        },
                        new
                        {
                            ColorId = new Guid("017d4c19-c47c-42c0-9028-9974553734e4"),
                            ColorCode = "#FFC0CB",
                            ColorName = "Hồng"
                        },
                        new
                        {
                            ColorId = new Guid("523030ae-49fc-4f3c-acef-8b8f1bbeee44"),
                            ColorCode = "#808080",
                            ColorName = "Xám"
                        },
                        new
                        {
                            ColorId = new Guid("46a7e77e-358a-47a9-89e6-f633f48511b2"),
                            ColorCode = "#A52A2A",
                            ColorName = "Nâu"
                        },
                        new
                        {
                            ColorId = new Guid("3821073e-a4f9-4f05-b802-395a61da25d3"),
                            ColorCode = "#000080",
                            ColorName = "Xanh lam"
                        },
                        new
                        {
                            ColorId = new Guid("4c22a2fd-ac8b-4fba-b103-1cb37013979a"),
                            ColorCode = "#00BFFF",
                            ColorName = "Xanh da trời"
                        },
                        new
                        {
                            ColorId = new Guid("cdea07a3-3606-4dbd-96f0-cc9903107410"),
                            ColorCode = "#FFDAB9",
                            ColorName = "Hồng phấn"
                        },
                        new
                        {
                            ColorId = new Guid("a926b8ca-4074-4f5c-a8b8-5cc1f9765e9c"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Xám tro"
                        },
                        new
                        {
                            ColorId = new Guid("2b43c23b-a74c-4e80-9ceb-47a7d82a1153"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Bạc"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f206baf-74fe-4753-bee2-d5358ac87df2"),
                            MaterialName = "Sắt"
                        },
                        new
                        {
                            Id = new Guid("d634d377-f008-4516-8ffe-ae3254dff219"),
                            MaterialName = "Nhựa pvc"
                        },
                        new
                        {
                            Id = new Guid("55cb8a7a-3fd0-49a4-8c84-6e3ba01830fc"),
                            MaterialName = "Gỗ"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingFee")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmout")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmoutAfterApplyingVoucher")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VoucherValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64ed3ee4-b18c-4d0e-8bfc-4d3074bd2580"),
                            OrderStatusName = "Đang được xử lý"
                        },
                        new
                        {
                            Id = new Guid("256f86a3-eb15-46ea-b48d-a253cce723be"),
                            OrderStatusName = "Chờ lấy hàng"
                        },
                        new
                        {
                            Id = new Guid("6f7dee08-5951-44f5-98ee-6541242c3ea4"),
                            OrderStatusName = "Đang giao hàng"
                        },
                        new
                        {
                            Id = new Guid("00bb5049-ced0-4441-8331-74798d8c911b"),
                            OrderStatusName = "Giao hàng thành công"
                        },
                        new
                        {
                            Id = new Guid("d77f0a42-f384-4092-ac86-389ef24c703a"),
                            OrderStatusName = "Giao hàng không thành công"
                        },
                        new
                        {
                            Id = new Guid("b60b7d66-df4d-4a34-9801-e841a47f1cd3"),
                            OrderStatusName = "Hủy đơn"
                        },
                        new
                        {
                            Id = new Guid("07f2ba73-1eaa-47ab-8e9e-5f0e53c153e6"),
                            OrderStatusName = "Yêu cầu trả hàng"
                        },
                        new
                        {
                            Id = new Guid("597c062b-cba0-47b8-9f83-d6b61721f1ed"),
                            OrderStatusName = "Chấp nhận trả hàng"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2583742-33a8-44b6-9350-487f20261f6c"),
                            PaymentName = "Thanh toán khi nhận hàng"
                        },
                        new
                        {
                            Id = new Guid("3fc07bc0-159b-47c5-80f5-205c862e8ce7"),
                            PaymentName = "Thanh toán Online"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b986ed6b-2011-4e30-89de-f845bf20489c"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("db0c69c2-8fcb-41ad-9de0-892ca48ae5a5"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("548ee949-c5a0-47bb-bfaf-1aa65466385e"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6381a7e-bc6e-4fc7-9e71-74fe84ffc8e8"),
                            ConcurrencyStamp = "43dc792c-8a8b-482b-a216-a6122e01ff1f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("1f6d8939-ae0c-4fdb-bf66-c6d017fcae4a"),
                            ConcurrencyStamp = "b5dd0b66-09b4-4eae-8b0e-74280d6d06f7",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("f0d825a9-60e6-4e76-90e1-e58185f37d88"),
                            ConcurrencyStamp = "095110d0-127d-4ad8-a4ed-47162958da4d",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUser");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Minimum_order_value")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.Property<Guid?>("VoucherStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherStatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoucherStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f5bf4ff-e128-47e9-914b-e60f85d325c4"),
                            Name = "Used"
                        },
                        new
                        {
                            Id = new Guid("d1a75855-8aa3-4e46-be7c-58c26314fdac"),
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("af945a6b-a675-45ab-a065-2aa93e7a8be7"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoucherType");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Adress", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.CartItem", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Cart", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "ProductDetail")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductDetail_ID");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("BanMoHinh.Share.Models.Payment", "PaymentType")
                        .WithMany("Order")
                        .HasForeignKey("PaymentId");

                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentType");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderItem", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "productDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Order");

                    b.Navigation("productDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Post", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId");

                    b.HasOne("BanMoHinh.Share.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BanMoHinh.Share.Models.Material", "Material")
                        .WithMany("Product")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Colors", "Colors")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("BanMoHinh.Share.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("BanMoHinh.Share.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId");

                    b.Navigation("Colors");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductImage", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rate", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.UserVoucher", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.VoucherStatus", "VoucherStatus")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherStatusId");

                    b.HasOne("BanMoHinh.Share.Models.VoucherType", "VoucherType")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeId");

                    b.Navigation("VoucherStatus");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherProduct", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Product", "Product")
                        .WithMany("VoucherProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.WishList", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "ProductDetail")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Colors", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Material", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderStatus", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("VoucherProduct");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherStatus", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using BanMoHinh.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BanMoHinh.API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231016145048_fixpro")]
    partial class fixpro
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BanMoHinh.Share.Models.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9cfb5bf-5d97-4096-8a62-aa19de46def1"),
                            BrandName = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("f61644ab-b193-4fec-ba60-3a44367ab67c"),
                            BrandName = "Brand 2"
                        },
                        new
                        {
                            Id = new Guid("7a9985bf-4ea5-4e97-8691-f603ed63161a"),
                            BrandName = "Brand 3"
                        },
                        new
                        {
                            Id = new Guid("eea176ac-2082-42e3-9b86-174825712d6b"),
                            BrandName = "Brand 4"
                        },
                        new
                        {
                            Id = new Guid("d935b78f-97e8-41a7-ab57-e1f8f9ed0ec5"),
                            BrandName = "Brand 5"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetail_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetail_ID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5866616-2061-42f0-ba4e-350e424b0c17"),
                            CategoryName = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("0f979cc1-d56e-4063-b91e-b86d7b36dcff"),
                            CategoryName = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("b89b4b7c-a8dc-4d56-8b28-61737fe1bdb0"),
                            CategoryName = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("fcece3ac-fefe-4da3-b990-2149aeb4e780"),
                            CategoryName = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("09ad07e8-00bb-4b4c-8b7f-aa9d6b091564"),
                            CategoryName = "Category 5"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Colors", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = new Guid("3254928c-2459-4f0e-ae14-91146a11982b"),
                            ColorCode = "#000000",
                            ColorName = "Đen"
                        },
                        new
                        {
                            ColorId = new Guid("88b8f68f-ef8e-4cc0-b255-90875ec89c3f"),
                            ColorCode = "#FFFFFF",
                            ColorName = "Trắng"
                        },
                        new
                        {
                            ColorId = new Guid("3ede6672-5ac7-4d57-ac41-e9681cb00dcc"),
                            ColorCode = "#FF0000",
                            ColorName = "Đỏ"
                        },
                        new
                        {
                            ColorId = new Guid("ad54cb5d-d783-4120-9866-fe12c81b7e79"),
                            ColorCode = "#00FF00",
                            ColorName = "Xanh lá cây"
                        },
                        new
                        {
                            ColorId = new Guid("25bb529a-45e7-4ef1-a4f6-98b893604d29"),
                            ColorCode = "#0000FF",
                            ColorName = "Xanh dương"
                        },
                        new
                        {
                            ColorId = new Guid("8abb6cd4-8a42-472a-af3c-438d76e0cf90"),
                            ColorCode = "#FFFF00",
                            ColorName = "Vàng"
                        },
                        new
                        {
                            ColorId = new Guid("1edd95a8-fd81-46c1-b3ff-8956b08d6db9"),
                            ColorCode = "#FFA500",
                            ColorName = "Cam"
                        },
                        new
                        {
                            ColorId = new Guid("ebaaa7ca-f0db-430d-bb2c-931b73b9040a"),
                            ColorCode = "#800080",
                            ColorName = "Tím"
                        },
                        new
                        {
                            ColorId = new Guid("e955fac9-973d-470b-9e74-f202fab80d45"),
                            ColorCode = "#FFC0CB",
                            ColorName = "Hồng"
                        },
                        new
                        {
                            ColorId = new Guid("da2177cf-2cf2-462f-a1c5-be05ee6fab44"),
                            ColorCode = "#808080",
                            ColorName = "Xám"
                        },
                        new
                        {
                            ColorId = new Guid("f520ec07-516e-4ab4-be68-6d37dad900e0"),
                            ColorCode = "#A52A2A",
                            ColorName = "Nâu"
                        },
                        new
                        {
                            ColorId = new Guid("949d5035-2192-4d2a-99e3-00c60510b80b"),
                            ColorCode = "#000080",
                            ColorName = "Xanh lam"
                        },
                        new
                        {
                            ColorId = new Guid("8a3243ef-fb30-495d-ba87-a32093ce3fb3"),
                            ColorCode = "#00BFFF",
                            ColorName = "Xanh da trời"
                        },
                        new
                        {
                            ColorId = new Guid("5b238aba-9ed0-4c0d-9474-2373448995c6"),
                            ColorCode = "#FFDAB9",
                            ColorName = "Hồng phấn"
                        },
                        new
                        {
                            ColorId = new Guid("d0c92120-9311-4b60-8d69-bbe944621db6"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Xám tro"
                        },
                        new
                        {
                            ColorId = new Guid("eb9a005b-da5a-4271-82c4-07288ea057ae"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Bạc"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ba5bdd0-56db-41d4-a775-7d59b14b3d03"),
                            MaterialName = "Sắt"
                        },
                        new
                        {
                            Id = new Guid("9905dd34-d7b6-4240-bc1f-2ae80342f653"),
                            MaterialName = "Nhựa pvc"
                        },
                        new
                        {
                            Id = new Guid("a9d3abf6-6bbf-4331-86a1-32427b51b6ee"),
                            MaterialName = "Gỗ"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingFee")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmout")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmoutAfterApplyingVoucher")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VoucherValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a50eeb3-a38b-4a90-be80-38a21e9aa6f9"),
                            OrderStatusName = "Đang được xử lý"
                        },
                        new
                        {
                            Id = new Guid("2958862d-cf75-47d9-a6bc-39d5515e1e04"),
                            OrderStatusName = "Chờ lấy hàng"
                        },
                        new
                        {
                            Id = new Guid("8b57033e-bf28-4637-80b9-1d93859c7913"),
                            OrderStatusName = "Đang giao hàng"
                        },
                        new
                        {
                            Id = new Guid("1cd0c3dd-9336-4954-ad05-41da797603b1"),
                            OrderStatusName = "Giao hàng thành công"
                        },
                        new
                        {
                            Id = new Guid("37c8362b-20f6-49a0-bd2f-61d86df89c6b"),
                            OrderStatusName = "Giao hàng không thành công"
                        },
                        new
                        {
                            Id = new Guid("46dfc364-d851-437a-9782-e8661531576b"),
                            OrderStatusName = "Hủy đơn"
                        },
                        new
                        {
                            Id = new Guid("e923e42a-b6ba-4257-8276-7ce64e9faa7a"),
                            OrderStatusName = "Yêu cầu trả hàng"
                        },
                        new
                        {
                            Id = new Guid("55cac8f9-4097-49a6-90ff-7b1b319567e2"),
                            OrderStatusName = "Chấp nhận trả hàng"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23d62b80-bd99-4ca0-9f23-f2fa7b17dc40"),
                            PaymentName = "Thanh toán khi nhận hàng"
                        },
                        new
                        {
                            Id = new Guid("d99b4538-7ac9-4560-811f-92526f752179"),
                            PaymentName = "Thanh toán Online"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be922356-07d1-4180-af7a-332bf8c1cdb0"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("219bdb57-d0b2-4c61-8927-1bfcfd23a7ca"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("d5cff66d-bbb0-4f42-9809-25fb4e7a8f6f"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ac33c85-2750-4448-a853-13effc29f79d"),
                            ConcurrencyStamp = "3252562e-cb4d-4eff-8305-8f915ca77e53",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b9e9923c-3792-461b-8a25-5f268f6b1eeb"),
                            ConcurrencyStamp = "7f2afbf6-0726-4b51-b08a-0c87161048a1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("88314876-bafe-4601-a479-0ba7f39a464b"),
                            ConcurrencyStamp = "49389960-c515-4cb4-a0df-c3661728b87a",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUser");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Minimum_order_value")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.Property<Guid?>("VoucherStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherStatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("voucherstatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eab5c8bb-296a-4ca2-bb2e-0e68478153ec"),
                            Name = "Used"
                        },
                        new
                        {
                            Id = new Guid("38a9932c-c96f-4fed-a79b-6f4013be449e"),
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("8e496366-b277-49b5-a1f0-06eea038da01"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoucherType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("152ff858-87c8-41fa-8326-0c5d308c6a45"),
                            Name = "Khánh hàng"
                        },
                        new
                        {
                            Id = new Guid("b9d899a2-a0cf-4260-bff2-170f836fb228"),
                            Name = "Sản phẩm"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Adress", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.CartItem", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Cart", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "ProductDetail")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductDetail_ID");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("BanMoHinh.Share.Models.Payment", "PaymentType")
                        .WithMany("Order")
                        .HasForeignKey("PaymentId");

                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentType");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderItem", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "productDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Order");

                    b.Navigation("productDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Post", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId");

                    b.HasOne("BanMoHinh.Share.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BanMoHinh.Share.Models.Material", "Material")
                        .WithMany("Product")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Colors", "Colors")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("BanMoHinh.Share.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("BanMoHinh.Share.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId");

                    b.Navigation("Colors");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductImage", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rate", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.UserVoucher", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.VoucherStatus", "VoucherStatus")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherStatusId");

                    b.HasOne("BanMoHinh.Share.Models.VoucherType", "VoucherType")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeId");

                    b.Navigation("VoucherStatus");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherProduct", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Product", "Product")
                        .WithMany("VoucherProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.WishList", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "ProductDetail")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Colors", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Material", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderStatus", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("VoucherProduct");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherStatus", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}

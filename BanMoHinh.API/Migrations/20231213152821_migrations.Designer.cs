// <auto-generated />
using System;
using BanMoHinh.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BanMoHinh.API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231213152821_migrations")]
    partial class migrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BanMoHinh.Share.Models.Adress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7557e3a-6cfe-4f08-869b-055833dfecab"),
                            BrandName = "Brand 1"
                        },
                        new
                        {
                            Id = new Guid("14005274-b592-4b72-b8b6-8a4b8543c930"),
                            BrandName = "Brand 2"
                        },
                        new
                        {
                            Id = new Guid("caa62f4e-6e8f-4ed4-8f9d-6c2ca25977a8"),
                            BrandName = "Brand 3"
                        },
                        new
                        {
                            Id = new Guid("a9297da5-c5a6-4bc8-9891-c318fe88517f"),
                            BrandName = "Brand 4"
                        },
                        new
                        {
                            Id = new Guid("c756ed9b-ee1a-480b-b676-4926ba9a72f7"),
                            BrandName = "Brand 5"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetail_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetail_ID");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aebdf489-2566-474c-a6af-cf930062d811"),
                            CategoryName = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("adf42997-ba3c-4acb-9013-e804c6447811"),
                            CategoryName = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("6ba13906-0053-4a6c-9e0e-b4ec59f2fc1d"),
                            CategoryName = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("f74c3f47-6a93-4dd5-98d7-ffded81e0791"),
                            CategoryName = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("e90362dd-1725-4ebd-96fc-662bfb4c3e96"),
                            CategoryName = "Category 5"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Colors", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = new Guid("40071dcd-0aad-4b1b-8839-d6b98ed7ae47"),
                            ColorCode = "#000000",
                            ColorName = "Đen"
                        },
                        new
                        {
                            ColorId = new Guid("1dfc4341-483b-465b-81fb-9241cc1c5826"),
                            ColorCode = "#FFFFFF",
                            ColorName = "Trắng"
                        },
                        new
                        {
                            ColorId = new Guid("c770e4e0-1b4a-45f1-bcff-de162f97f108"),
                            ColorCode = "#FF0000",
                            ColorName = "Đỏ"
                        },
                        new
                        {
                            ColorId = new Guid("120bdafd-c9f0-4805-8b5d-4abc81a6753c"),
                            ColorCode = "#00FF00",
                            ColorName = "Xanh lá cây"
                        },
                        new
                        {
                            ColorId = new Guid("619acc96-08b5-457c-a9df-6c35b00b319f"),
                            ColorCode = "#0000FF",
                            ColorName = "Xanh dương"
                        },
                        new
                        {
                            ColorId = new Guid("c42a2ce1-4222-4872-9e68-687b3f3fae0a"),
                            ColorCode = "#FFFF00",
                            ColorName = "Vàng"
                        },
                        new
                        {
                            ColorId = new Guid("f157d777-5070-448f-aeef-ea2dab3122fb"),
                            ColorCode = "#FFA500",
                            ColorName = "Cam"
                        },
                        new
                        {
                            ColorId = new Guid("72dbbc25-fe0f-4383-bc7e-0659d6dd1b4f"),
                            ColorCode = "#800080",
                            ColorName = "Tím"
                        },
                        new
                        {
                            ColorId = new Guid("c6c2c27f-c002-4150-a087-e291ec2b446f"),
                            ColorCode = "#FFC0CB",
                            ColorName = "Hồng"
                        },
                        new
                        {
                            ColorId = new Guid("8afb22c1-46ac-4c9d-ab10-8d84e96b1116"),
                            ColorCode = "#808080",
                            ColorName = "Xám"
                        },
                        new
                        {
                            ColorId = new Guid("9c7f8b14-6cd9-40ae-91e7-f117ff973625"),
                            ColorCode = "#A52A2A",
                            ColorName = "Nâu"
                        },
                        new
                        {
                            ColorId = new Guid("6f62752e-17ab-4826-a98d-80ad508d424a"),
                            ColorCode = "#000080",
                            ColorName = "Xanh lam"
                        },
                        new
                        {
                            ColorId = new Guid("6b6d3770-bd28-4c06-b99f-ad5faf354cfd"),
                            ColorCode = "#00BFFF",
                            ColorName = "Xanh da trời"
                        },
                        new
                        {
                            ColorId = new Guid("9e17d064-35a7-465c-863e-99cdfcf10a4c"),
                            ColorCode = "#FFDAB9",
                            ColorName = "Hồng phấn"
                        },
                        new
                        {
                            ColorId = new Guid("6a0cfbb4-6e3a-43b9-8bc4-d7d068472893"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Xám tro"
                        },
                        new
                        {
                            ColorId = new Guid("a14db81a-d791-4a60-9f6f-a81f3bc421b7"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Bạc"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8826f400-d31a-4110-bcdf-1bd9de63e30a"),
                            MaterialName = "Sắt"
                        },
                        new
                        {
                            Id = new Guid("9c389c50-deee-4f29-9418-b6475d1e5679"),
                            MaterialName = "Nhựa pvc"
                        },
                        new
                        {
                            Id = new Guid("b184a43d-da3e-48dd-bef4-48cc40c5ef78"),
                            MaterialName = "Gỗ"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAmout")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalAmoutAfterApplyingVoucher")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("VoucherValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3b08860-40e6-4fd7-b660-caac5cee3233"),
                            OrderStatusName = "Đang được xử lý"
                        },
                        new
                        {
                            Id = new Guid("a9d55f2e-08a6-40eb-87bd-8ab28fc647ad"),
                            OrderStatusName = "Chờ lấy hàng"
                        },
                        new
                        {
                            Id = new Guid("8888487a-77ed-486b-9d2c-86529afe0da1"),
                            OrderStatusName = "Đang giao hàng"
                        },
                        new
                        {
                            Id = new Guid("91f3eb48-af2d-41c1-b33c-28c99a6c6d8c"),
                            OrderStatusName = "Giao hàng thành công"
                        },
                        new
                        {
                            Id = new Guid("7eb28428-58af-4d4a-8b98-15ca4a5156a6"),
                            OrderStatusName = "Giao hàng không thành công"
                        },
                        new
                        {
                            Id = new Guid("b4687c30-8ac9-4f5b-9e30-5c22f1a8492c"),
                            OrderStatusName = "Hủy đơn"
                        },
                        new
                        {
                            Id = new Guid("96def6bf-e069-4e4b-bef6-c5017427380d"),
                            OrderStatusName = "Yêu cầu trả hàng"
                        },
                        new
                        {
                            Id = new Guid("30c0a482-5eb4-4547-80a2-b81e1c352408"),
                            OrderStatusName = "Chấp nhận trả hàng"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e41f5f0d-2bb9-40bd-b2a9-73b9d5a2d584"),
                            PaymentName = "Thanh toán khi nhận hàng"
                        },
                        new
                        {
                            Id = new Guid("6fe93aee-8813-4a41-8034-ea0e8a1b4096"),
                            PaymentName = "Thanh toán Online"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TittleImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoinsMax")
                        .HasColumnType("int");

                    b.Property<int?>("PointsMin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17755b14-09d7-423d-8f70-78a465a32012"),
                            Name = "Bạc",
                            PoinsMax = 1000000,
                            PointsMin = 0
                        },
                        new
                        {
                            Id = new Guid("ca2eb495-a874-4afc-9c77-04054e5d1369"),
                            Name = "Vàng",
                            PoinsMax = 3000000,
                            PointsMin = 1000001
                        },
                        new
                        {
                            Id = new Guid("661d428f-177b-4a51-9c5a-da23640f404c"),
                            Name = "Kim Cương",
                            PoinsMax = 10000000,
                            PointsMin = 3000001
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("431765f8-6050-4f98-9ee0-2834b3aef4ea"),
                            ConcurrencyStamp = "18fc415d-b7db-4431-89ce-a664d90e8288",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d8116c51-e370-4d12-97ce-41cadbcfa2cd"),
                            ConcurrencyStamp = "3f068187-5e92-4664-990a-80d08fab3cf5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("c1d777d1-b714-409f-9357-961169dc33af"),
                            ConcurrencyStamp = "89a59651-3a61-481e-841c-b6dcbcc6ea97",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a364d29-5bba-4691-be35-e105849e6434"),
                            Height = 30.0,
                            SizeName = "Size 1",
                            Width = 30.0
                        },
                        new
                        {
                            Id = new Guid("6bc8a764-20ad-4e13-b8d0-38b1a609067f"),
                            Height = 30.0,
                            SizeName = "Size 2",
                            Width = 30.0
                        },
                        new
                        {
                            Id = new Guid("52bdf1a1-4b95-44f7-bae7-cb07f37b1afd"),
                            Height = 30.0,
                            SizeName = "Size 3",
                            Width = 30.0
                        },
                        new
                        {
                            Id = new Guid("f8b452b5-5e3d-4969-b1f5-a2b4c2bd800a"),
                            Height = 30.0,
                            SizeName = "Size 4",
                            Width = 30.0
                        },
                        new
                        {
                            Id = new Guid("3c4ed708-94ee-47fc-8699-48c5923e7f9f"),
                            Height = 30.0,
                            SizeName = "Size 5",
                            Width = 30.0
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUser");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Discount_Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Minimum_order_value")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.Property<Guid?>("VoucherStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherStatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("voucherstatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06e7be7d-2fdc-47ad-8e76-e0099f01ffb9"),
                            Name = "Used"
                        },
                        new
                        {
                            Id = new Guid("7224dc5c-7e67-42b0-9609-43fd385e08f4"),
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("8b6f563d-8fd5-4bdd-9d7c-b7b5c50f0d93"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoucherType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3d51f77-9719-4460-a750-6fc0787a9846"),
                            Name = "Khánh hàng"
                        },
                        new
                        {
                            Id = new Guid("246e9421-8de4-4065-ae7d-111ab1795dff"),
                            Name = "Sản phẩm"
                        });
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Adress", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Adresses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.CartItem", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Cart", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartId");

                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "ProductDetail")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductDetail_ID");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("BanMoHinh.Share.Models.Payment", "PaymentType")
                        .WithMany("Order")
                        .HasForeignKey("PaymentId");

                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentType");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderItem", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "productDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Order");

                    b.Navigation("productDetail");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Post", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId");

                    b.HasOne("BanMoHinh.Share.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BanMoHinh.Share.Models.Material", "Material")
                        .WithMany("Product")
                        .HasForeignKey("MaterialId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Colors", "Colors")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("BanMoHinh.Share.Models.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("BanMoHinh.Share.Models.Size", "Size")
                        .WithMany("ProductDetails")
                        .HasForeignKey("SizeId");

                    b.Navigation("Colors");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductImage", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.ProductDetail", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rate", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.UserVoucher", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.VoucherStatus", "VoucherStatus")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherStatusId");

                    b.HasOne("BanMoHinh.Share.Models.VoucherType", "VoucherType")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeId");

                    b.Navigation("VoucherStatus");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherProduct", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Product", "Product")
                        .WithMany("VoucherProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.WishList", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Product", "Products")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.User", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BanMoHinh.Share.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Brand", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Cart", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Colors", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Material", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.OrderStatus", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Product", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("VoucherProduct");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.ProductDetail", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Size", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.User", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("VoucherUsers");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.Voucher", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherStatus", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("BanMoHinh.Share.Models.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
